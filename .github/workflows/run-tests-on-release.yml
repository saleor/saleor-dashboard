name: Run automation tests on release
on:
  workflow_call:
    inputs:
      VERSION:
        type: string
        required: true
        description: Version of run eg. "3.19"
      CUSTOM_VERSION:
        type: string
        required: true
        description: Version of run eg. "3.19.4-5a41d18"
      ADDITIONAL_TITLE:
        type: string
        required: false
        default: "Dashboard Automation test run "

    secrets:
      STAGING_TOKEN:
        required: true
      TESTMO_URL:
        required: true
      TESTMO_TOKEN:
        required: true
      E2E_USER_NAME:
        required: true
      E2E_USER_PASSWORD:
        required: true
      E2E_PERMISSIONS_USERS_PASSWORD:
        required: true
      MAILPITURL:
        required: true
      SLACK_QA_STATUSES_WEBHOOK_URL:
        required: true

    outputs:
      TESTS_CONCLUSION:
        value: ${{ jobs.tests-complete.outputs.TESTS_CONCLUSION }}
        description: conclusion of tests
      RUN_URL: 
        value: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        description: Url to job run
        
jobs:
  add-check-and-prepare-instance:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{inputs.VERSION}}
      CUSTOM_VERSION: ${{inputs.CUSTOM_VERSION}}
    outputs:
      VERSION: ${{ env.VERSION }}
      TESTMO_RUN_ID: ${{ steps.init-testmo.outputs.testmo-run-id }}
      POOL_NAME: ${{ steps.pool_variables.outputs.POOL_NAME }}
      POOL_INSTANCE: ${{ steps.pool_variables.outputs.POOL_INSTANCE }}
      BASE_URL: ${{ steps.cloud_variables.outputs.BASE_URL }}
      API_URL: ${{ steps.cloud_variables.outputs.API_URL }}
      BACKUP_ID: ${{ steps.cloud_variables.outputs.BACKUP_ID }}
      BACKUP_VER: ${{ steps.cloud_variables.outputs.BACKUP_VER }}
      BACKUP_NAME: ${{ steps.cloud_variables.outputs.BACKUP_NAME }}
      CHECK_ID: ${{ steps.create-check.outputs.CHECK_ID }}
      FRAMEWORK: ${{ steps.check-framework.outputs.result }}
      IS_OLD_VERSION: ${{ steps.get-environment-variables.outputs.IS_OLD_VERSION }}
    steps:
      - uses: actions/checkout@v4

      - id: check-framework
        uses: actions/github-script@v7
        env:
          VERSION: "${{inputs.VERSION}}"
        with:
          script: |
            const { VERSION } = process.env
            const versionWithoutDot = VERSION.replaceAll(/\./g, "")
            if(versionWithoutDot >= 319){
              return "playwright"
            }else{
              return "cypress"
            }

      - name: Create check if release PR exists
        id: create-check
        uses: ./.github/actions/checks/create-pull-request-check
        with:
          PR_HEAD: "changeset-release/${{env.VERSION}}"
          CHECK_NAME: "Automation_tests_run"
          STATUS: "in_progress"
          TITLE: "Automation tests run"
          DETAILS_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Generate variables
        id: cloud_variables
        uses: ./.github/actions/prepare-tests-variables
        with:
          CLI_TOKEN: ${{ secrets.STAGING_TOKEN }}
          MODE: "from-version"
          VERSION: ${{ env.VERSION }}

      - name: Prepare instances
        id: pool_variables
        uses: ./.github/actions/prepare-instance
        with:
          STRATEGY: reload
          CLI_TOKEN: ${{ secrets.STAGING_TOKEN }}
          BASE_URL: ${{ steps.cloud_variables.outputs.BASE_URL }}
          API_URL: ${{ steps.cloud_variables.outputs.API_URL }}
          POOL_NAME: ${{ steps.cloud_variables.outputs.POOL_NAME }}
          POOL_INSTANCE: ${{ steps.cloud_variables.outputs.POOL_INSTANCE }}
          BACKUP_ID: ${{ steps.cloud_variables.outputs.BACKUP_ID }}

      - uses: ./.github/actions/testmo/testmo-init
        with:
          testmoUrl: ${{ secrets.TESTMO_URL }}
          testmoToken: ${{ secrets.TESTMO_TOKEN }}
          testmoRunName: "${{ steps.check-framework.outputs.result }} run ${{ env.CUSTOM_VERSION }}"
        id: init-testmo

      - name: get environment variables
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TOKEN: ${{ secrets.CLOUD_ACCESS_TOKEN }}
        id: get-environment-variables
        run: |
          node .github/workflows/cypressTestsHelpers/getEnvironmentVariables.js \
            --version $CUSTOM_VERSION \
            --token "$TOKEN" \
            --repo_token "$REPO_TOKEN" \
            --project "$PROJECT"

  run-cy-tests:
    if: needs.add-check-and-prepare-instance.outputs.FRAMEWORK == '"cypress"'
    needs: add-check-and-prepare-instance
    runs-on: ubuntu-22.04
    container: 
      image: cypress/browsers:node18.12.0-chrome106-ff106
      options: --user 1001  
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2, 3, 4, 5, 6]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.add-check-and-prepare-instance.outputs.VERSION }}

      - name: Set tag for tests
        id: set-tag-for-tests
        uses: actions/github-script@v6
        env:
          is_old_version: ${{ needs.add-check-and-prepare-instance.outputs.IS_OLD_VERSION }}
        with:
          result-encoding: string
          script: |
            const { is_old_version } = process.env
            if(is_old_version == "true"){
              return "@oldRelease"
            }else{
              return "@stable"
            }

      - name: Cypress run
        id: cypress-run
        uses: ./.github/actions/e2e
        continue-on-error: true
        with:
          apiUrl: ${{ needs.add-check-and-prepare-instance.outputs.API_URL }}
          appMountUri: ${{ secrets.APP_MOUNT_URI }}
          baseUrl: ${{ needs.add-check-and-prepare-instance.outputs.BASE_URL }}
          userName: ${{ secrets.CYPRESS_USER_NAME }}
          secondUserName: ${{ secrets.CYPRESS_SECOND_USER_NAME }}
          userPassword: ${{ secrets.CYPRESS_USER_PASSWORD }}
          permissionsUserPassword: ${{ secrets.CYPRESS_PERMISSIONS_USERS_PASSWORD }}
          mailpitUrl: ${{ secrets.CYPRESS_MAILPITURL }}
          stripeSecretKey: ${{ secrets.STRIPE_SECRET_KEY }}
          stripePublicKey: ${{ secrets.STRIPE_PUBLIC_KEY }}
          cypressGrepTags:  ${{steps.set-tag-for-tests.outputs.result}}
          split: ${{ strategy.job-total }}
          splitIndex: ${{ strategy.job-index }}
          commitInfoMessage: All tests triggered via ${{ github.event_name}} on ${{ steps.get-env-uri.outputs.ENV_URI }}
          install: false
          browser: "electron"

      - name: Testmo threads submit
        uses: ./.github/actions/testmo/testmo-threads-submit
        with:
          testmoUrl: ${{ secrets.TESTMO_URL }}
          testmoToken: ${{ secrets.TESTMO_TOKEN }}
          testmoRunId: ${{ needs.add-check-and-prepare-instance.outputs.TESTMO_RUN_ID }}

  run-pw-tests:
    runs-on: ubuntu-22.04
    needs: "add-check-and-prepare-instance"
    if: needs.add-check-and-prepare-instance.outputs.FRAMEWORK == '"playwright"'
    strategy:
      fail-fast: false
      matrix:
        shard: [1/2, 2/2]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.add-check-and-prepare-instance.outputs.VERSION }}

      - name: Run playwright tests
        uses: ./.github/actions/run-pw-tests
        with:
          SHARD: ${{ matrix.shard }}
          BASE_URL: ${{ needs.add-check-and-prepare-instance.outputs.BASE_URL }}
          API_URL: ${{ needs.add-check-and-prepare-instance.outputs.API_URL }}
          E2E_USER_NAME: ${{ secrets.E2E_USER_NAME }}
          E2E_USER_PASSWORD: ${{ secrets.E2E_USER_PASSWORD }}
          E2E_PERMISSIONS_USERS_PASSWORD: ${{ secrets.E2E_PERMISSIONS_USERS_PASSWORD }}
          MAILPITURL: ${{ secrets.MAILPITURL }}
          URL_TO_RUN: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          PW_WORKERS: ${{ vars.PW_WORKERS }}
          PW_RETRIES: ${{ vars.PW_RETRIES }}

      - name: submit-results-to-testmo
        if: always()
        uses: ./.github/actions/testmo/testmo-threads-submit-playwright
        with:
          testmoUrl: ${{ secrets.TESTMO_URL }}
          testmoToken: ${{ secrets.TESTMO_TOKEN }}
          testmoRunId: ${{ needs.add-check-and-prepare-instance.outputs.TESTMO_RUN_ID }}

  tests-complete:
    if: |
      !cancelled() && always()
    needs: ["add-check-and-prepare-instance", "run-cy-tests", "run-pw-tests"]
    runs-on: ubuntu-22.04
    outputs:
      TESTS_CONCLUSION: "${{ steps.send-slack-message.outputs.status }}"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"

      - name: Install dependencies
        run: npm ci

      - name: Merge playwright reports
        if: needs.add-check-and-prepare-instance.outputs.FRAMEWORK == '"playwright"'
        uses: ./.github/actions/merge-pw-reports

      - name: Merge cypress reports
        if: needs.add-check-and-prepare-instance.outputs.FRAMEWORK == '"cypress"'
        uses: ./.github/actions/combineReportsFromE2E

      - name: complete testmo report
        uses: ./.github/actions/testmo/testmo-finish
        with:
          testmoUrl: ${{ secrets.TESTMO_URL }}
          testmoToken: ${{ secrets.TESTMO_TOKEN }}
          testmoRunId: ${{ needs.add-check-and-prepare-instance.outputs.TESTMO_RUN_ID }}

      - name: send message on slack
        working-directory: ".github"
        id: send-slack-message
        env:
          RUN_ID: ${{ needs.add-check-and-prepare-instance.outputs.TESTMO_RUN_ID }}
          URL_TO_ACTION: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}
          ENVIRONMENT: ${{ needs.add-check-and-prepare-instance.outputs.BASE_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_QA_STATUSES_WEBHOOK_URL }}
          REF_NAME: ${{github.ref_name}}
          ADDITIONAL_TITLE: "${{inputs.ADDITIONAL_TITLE}} ${{ needs.add-check-and-prepare-instance.outputs.VERSION }}"
        run: |
          node workflows/postTestsResults.js \
          --run_id "$RUN_ID" \
          --testmo_token "$TESTMO_TOKEN" \
          --slack_webhook_url "$SLACK_WEBHOOK_URL" \
          --environment "$ENVIRONMENT" \
          --url_to_action "$URL_TO_ACTION" \
          --ref_name "$REF_NAME" \
          --additional_title "$ADDITIONAL_TITLE" 

      - id: update-check
        if: always() && ${{ needs.add-check-and-prepare-instance.outputs.CHECK_ID }}
        uses: ./.github/actions/checks/update-pull-request-check
        with:
          CHECK_ID: ${{ needs.add-check-and-prepare-instance.outputs.CHECK_ID }}
          CHECK_NAME: "Automation_tests_run"
          STATUS: "completed"
          CONCLUSION: "${{ steps.send-slack-message.outputs.status }}"
          TITLE: "Automation tests run"
          SUMMARY: "${{ steps.send-slack-message.outputs.message }}. Run details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          DETAILS_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  update-check-status-if-previous-job-fails:
    runs-on: ubuntu-latest
    needs: [tests-complete, add-check-and-prepare-instance]
    if: |
      always() &&
      (needs.tests-complete != 'success' && cancelled()) &&
      needs.add-check-and-prepare-instance.outputs.FRAMEWORK   == '"playwright"'

    steps:
      - uses: actions/checkout@v4

      - name: Change job status if cancelled
        if: cancelled()
        uses: ./.github/actions/checks/update-pull-request-check
        with:
          CHECK_ID: ${{ needs.add-check-and-prepare-instance.outputs.CHECK_ID }}
          CHECK_NAME: "Automation_tests_run"
          STATUS: "cancelled"
          TITLE: "Automation tests run"
          DETAILS_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Change job status if previous job failed or skipped
        if: needs.tests-complete != 'success' && !cancelled()
        uses: ./.github/actions/checks/update-pull-request-check
        with:
          CHECK_ID: ${{ needs.add-check-and-prepare-instance.outputs.CHECK_ID }}
          CHECK_NAME: "Automation_tests_run"
          STATUS: "completed"
          CONCLUSION: "failure"
          TITLE: "Automation tests run"
          SUMMARY: "Run failed"
          DETAILS_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"