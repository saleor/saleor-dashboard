import { act } from "@testing-library/react";
import { renderHook } from "@testing-library/react-hooks";

import { useVoucherCodes } from "./useVoucherCodes";

const autoGeneratedVoucherCodes = Array.from({ length: 5 }, () => ({
  code: "code-68276b31-3b41-4004-acd6-bad8c36d524f",
  status: "Draft",
}));

jest.mock("uuid", () => ({ v4: () => "68276b31-3b41-4004-acd6-bad8c36d524f" }));

describe("useVoucherCodes", () => {
  it("should return manually generated voucher codes", () => {
    // Arrange
    const { result } = renderHook(() => useVoucherCodes());

    // Act
    act(() => {
      result.current.handleAddVoucherCode("code 3");
      result.current.handleAddVoucherCode("code 4");
    });

    // Assert
    expect(result.current.voucherCodes).toEqual([
      { code: "code 4", status: "Draft" },
      { code: "code 3", status: "Draft" },
    ]);
  });

  it("should return automatictlly genereted voucher codes", () => {
    // Arrange
    const { result } = renderHook(() => useVoucherCodes());

    // Act
    act(() => {
      result.current.handleGenerateMultipleCodes({
        quantity: "5",
        prefix: "code",
      });
    });

    // Assert
    expect(result.current.voucherCodes).toEqual([...autoGeneratedVoucherCodes]);
  });

  it("should allow to paginate voucher codes comes from client", () => {
    // Arrange
    const { result } = renderHook(() => useVoucherCodes());

    // Act
    act(() => {
      result.current.updateVoucherCodesListSettings("rowNumber", 5);
      result.current.handleGenerateMultipleCodes({
        quantity: "10",
        prefix: "code",
      });
      result.current.handleAddVoucherCode("code 1");
      result.current.handleAddVoucherCode("code 2");
    });

    // Assert
    expect(result.current.voucherCodes).toEqual([
      { code: "code 2", status: "Draft" },
      { code: "code 1", status: "Draft" },
      ...autoGeneratedVoucherCodes.slice(2),
    ]);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
    });

    // Asssert
    expect(result.current.voucherCodesPagination.pageInfo?.hasNextPage).toBe(
      true,
    );
    expect(
      result.current.voucherCodesPagination.pageInfo?.hasPreviousPage,
    ).toBe(true);
    expect(result.current.voucherCodes).toEqual(autoGeneratedVoucherCodes);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo?.hasNextPage).toBe(
      false,
    );
    expect(
      result.current.voucherCodesPagination.pageInfo?.hasPreviousPage,
    ).toBe(true);
    expect(result.current.voucherCodes).toEqual(
      autoGeneratedVoucherCodes.slice(0, 2),
    );

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadPreviousPage();
    });
    act(() => {
      result.current.voucherCodesPagination.loadPreviousPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo?.hasNextPage).toBe(
      true,
    );
    expect(
      result.current.voucherCodesPagination.pageInfo?.hasPreviousPage,
    ).toBe(false);
    expect(result.current.voucherCodes).toEqual([
      { code: "code 2", status: "Draft" },
      { code: "code 1", status: "Draft" },
      ...autoGeneratedVoucherCodes.slice(2),
    ]);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
      result.current.updateVoucherCodesListSettings("rowNumber", 20);
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo?.hasNextPage).toBe(
      false,
    );
    expect(
      result.current.voucherCodesPagination.pageInfo?.hasPreviousPage,
    ).toBe(false);
    expect(result.current.voucherCodes).toEqual([
      { code: "code 2", status: "Draft" },
      { code: "code 1", status: "Draft" },
      ...autoGeneratedVoucherCodes,
      ...autoGeneratedVoucherCodes,
    ]);
  });
});
