import { useVoucherCodesQuery } from "@dashboard/graphql";
import { act } from "@testing-library/react";
import { renderHook } from "@testing-library/react-hooks";

import { useVoucherCodes } from "./useVoucherCodes";

const apiVoucherCodes = Array.from({ length: 10 }, (_, i) => ({
  node: {
    code: `code ${i + 1}`,
    used: 0,
  },
}));

const autoGeneratedVoucherCodes = Array.from({ length: 5 }, () => ({
  code: "code-123456789",
  status: "Draft",
}));

jest.mock("uuid", () => ({ v4: () => "123456789" }));
jest.mock("@dashboard/graphql", () => ({
  useVoucherCodesQuery: jest.fn(() => ({
    data: {
      voucher: {
        codes: {
          edges: apiVoucherCodes.slice(0, 2),
          pageInfo: {
            hasNextPage: true,
            hasPreviousPage: false,
          },
        },
      },
    },

    refetch: jest.fn(),
  })),
}));

describe("useVoucherCodes", () => {
  it("should return manually generated voucher coded", () => {
    // Arrange
    const { result } = renderHook(() => useVoucherCodes({ id: "1" }));

    // Act
    act(() => {
      result.current.handleAddVoucherCode("code 3");
      result.current.handleAddVoucherCode("code 4");
    });

    // Assert
    expect(result.current.voucherCodes).toEqual([
      { code: "code 4", status: "Draft" },
      { code: "code 3", status: "Draft" },
      { code: "code 1", used: 0 },
      { code: "code 2", used: 0 },
    ]);
  });

  it("should return automatictlly genereted voucher codes", () => {
    // Arrange
    const { result } = renderHook(() => useVoucherCodes({ id: "1" }));

    // Act
    act(() => {
      result.current.handleGenerateMultipleCodes({
        quantity: "5",
        prefix: "code",
      });
    });

    // Assert
    expect(result.current.voucherCodes).toEqual([
      ...autoGeneratedVoucherCodes,
      { code: "code 1", used: 0 },
      { code: "code 2", used: 0 },
    ]);
  });

  it("should allow to paginate voucher codes comes from server", () => {
    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: {
        voucher: {
          codes: {
            edges: apiVoucherCodes.slice(0, 2),
            pageInfo: {
              hasNextPage: true,
              hasPreviousPage: false,
            },
          },
        },
      },
    }));

    const { result } = renderHook(() => useVoucherCodes({ id: "1" }));

    // Act
    act(() => {
      result.current.updateVoucherCodesListSettings("rowNumber", 2);
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      false,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      true,
    );

    expect(result.current.voucherCodes).toEqual([
      { code: "code 1", used: 0 },
      { code: "code 2", used: 0 },
    ]);

    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: {
        voucher: {
          codes: {
            edges: apiVoucherCodes.slice(2, 4),
            pageInfo: {
              hasNextPage: false,
              hasPreviousPage: true,
            },
          },
        },
      },
    }));

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
    });

    // Assert
    expect(result.current.voucherCodes).toEqual([
      { code: "code 3", used: 0 },
      { code: "code 4", used: 0 },
    ]);
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      false,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      true,
    );

    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: {
        voucher: {
          codes: {
            edges: apiVoucherCodes.slice(0, 2),
            pageInfo: {
              hasNextPage: true,
              hasPreviousPage: false,
            },
          },
        },
      },
    }));

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadPreviousPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      true,
    );
    expect(result.current.voucherCodes).toEqual([
      { code: "code 1", used: 0 },
      { code: "code 2", used: 0 },
    ]);
  });

  it("should allow to paginate voucher codes comes from client", () => {
    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: null,
    }));

    const { result } = renderHook(() => useVoucherCodes({ id: "1" }));

    // Act
    act(() => {
      result.current.updateVoucherCodesListSettings("rowNumber", 5);
      result.current.handleGenerateMultipleCodes({
        quantity: "10",
        prefix: "code",
      });
      result.current.handleAddVoucherCode("code 1");
      result.current.handleAddVoucherCode("code 2");
    });

    // Assert
    expect(result.current.voucherCodes).toEqual([
      { code: "code 2", status: "Draft" },
      { code: "code 1", status: "Draft" },
      ...autoGeneratedVoucherCodes.slice(2),
    ]);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
    });

    // Asssert
    expect(result.current.voucherCodesPagination.pageInfo?.hasNextPage).toBe(
      true,
    );
    expect(
      result.current.voucherCodesPagination.pageInfo?.hasPreviousPage,
    ).toBe(true);
    expect(result.current.voucherCodes).toEqual(autoGeneratedVoucherCodes);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo?.hasNextPage).toBe(
      false,
    );
    expect(
      result.current.voucherCodesPagination.pageInfo?.hasPreviousPage,
    ).toBe(true);
    expect(result.current.voucherCodes).toEqual(
      autoGeneratedVoucherCodes.slice(0, 2),
    );

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadPreviousPage();
    });
    act(() => {
      result.current.voucherCodesPagination.loadPreviousPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo?.hasNextPage).toBe(
      true,
    );
    expect(
      result.current.voucherCodesPagination.pageInfo?.hasPreviousPage,
    ).toBe(false);
    expect(result.current.voucherCodes).toEqual([
      { code: "code 2", status: "Draft" },
      { code: "code 1", status: "Draft" },
      ...autoGeneratedVoucherCodes.slice(2),
    ]);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
      result.current.updateVoucherCodesListSettings("rowNumber", 20);
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo?.hasNextPage).toBe(
      false,
    );
    expect(
      result.current.voucherCodesPagination.pageInfo?.hasPreviousPage,
    ).toBe(false);
    expect(result.current.voucherCodes).toEqual([
      { code: "code 2", status: "Draft" },
      { code: "code 1", status: "Draft" },
      ...autoGeneratedVoucherCodes,
      ...autoGeneratedVoucherCodes,
    ]);
  });

  it("should allow to paginate voucher codes comes from client and server", () => {
    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: {
        voucher: {
          codes: {
            edges: apiVoucherCodes.slice(0, 2),
            pageInfo: {
              hasNextPage: false,
              hasPreviousPage: true,
            },
          },
        },
      },
    }));

    const { result } = renderHook(() => useVoucherCodes({ id: "1" }));

    // Act
    act(() => {
      result.current.updateVoucherCodesListSettings("rowNumber", 2);
      result.current.handleGenerateMultipleCodes({
        quantity: "3",
        prefix: "code",
      });
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      true,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      false,
    );
    expect(result.current.voucherCodes).toEqual(
      autoGeneratedVoucherCodes.slice(3),
    );

    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: {
        voucher: {
          codes: {
            edges: [apiVoucherCodes[0]],
            pageInfo: {
              hasNextPage: true,
              hasPreviousPage: false,
            },
          },
        },
      },
    }));

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      true,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      true,
    );
    expect(result.current.voucherCodes).toEqual([
      ...autoGeneratedVoucherCodes.slice(0, 1),
      { code: "code 1", used: 0 },
    ]);

    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: {
        voucher: {
          codes: {
            edges: [apiVoucherCodes[1]],
            pageInfo: {
              hasNextPage: false,
              hasPreviousPage: true,
            },
          },
        },
      },
    }));

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      false,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      true,
    );
    expect(result.current.voucherCodes).toEqual([{ code: "code 2", used: 0 }]);

    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: {
        voucher: {
          codes: {
            edges: [apiVoucherCodes[0]],
            pageInfo: {
              hasNextPage: true,
              hasPreviousPage: false,
            },
          },
        },
      },
    }));

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadPreviousPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      true,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      true,
    );

    expect(result.current.voucherCodes).toEqual([
      ...autoGeneratedVoucherCodes.slice(0, 1),
      { code: "code 1", used: 0 },
    ]);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadPreviousPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      true,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      false,
    );
    expect(result.current.voucherCodes).toEqual(
      autoGeneratedVoucherCodes.slice(0, 2),
    );
  });

  it("should allow to handle client and server pagination when client generate whole page", () => {
    // Arrange
    (useVoucherCodesQuery as jest.Mock).mockImplementation(() => ({
      data: {
        voucher: {
          codes: {
            edges: apiVoucherCodes.slice(0, 2),
            pageInfo: {
              hasNextPage: false,
              hasPreviousPage: false,
            },
          },
        },
      },
    }));

    const { result } = renderHook(() => useVoucherCodes({ id: "1" }));

    // Act
    act(() => {
      result.current.updateVoucherCodesListSettings("rowNumber", 10);
      result.current.handleGenerateMultipleCodes({
        quantity: "10",
        prefix: "code",
      });
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      true,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      false,
    );
    expect(result.current.voucherCodes).toEqual([
      ...autoGeneratedVoucherCodes,
      ...autoGeneratedVoucherCodes,
    ]);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadNextPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      false,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      true,
    );
    expect(result.current.voucherCodes).toEqual([
      { code: "code 1", used: 0 },
      { code: "code 2", used: 0 },
    ]);

    // Act
    act(() => {
      result.current.voucherCodesPagination.loadPreviousPage();
    });

    // Assert
    expect(result.current.voucherCodesPagination.pageInfo.hasNextPage).toBe(
      true,
    );
    expect(result.current.voucherCodesPagination.pageInfo.hasPreviousPage).toBe(
      false,
    );
    expect(result.current.voucherCodes).toEqual([
      ...autoGeneratedVoucherCodes,
      ...autoGeneratedVoucherCodes,
    ]);
  });
});
